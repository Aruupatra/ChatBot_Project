class Solution {
    public static int longestCommonSubsequence_memo(String s1,String s2,int i,int j,int[][] dp)
    {
        if(i==0||j==0)
        {
            return dp[i][j]=0;
        }
        
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        
        if(s1.charAt(i-1)==s2.charAt(j-1))
        {
            return dp[i][j]=longestCommonSubsequence_memo(s1,s2,i-1,j-1,dp)+1;
        }
        else
        {
            return dp[i][j]=Math.max(longestCommonSubsequence_memo(s1,s2,i,j-1,dp),longestCommonSubsequence_memo(s1,s2,i-1,j,dp));
        }
    }
    public static int longestCommonSubsequence_tabu(String s1,String s2,int I,int J,int[][] dp)
    {
        for(int i=0;i<=I;i++)
        {
            for(int j=0;j<=J;j++)
            {
                if(i==0||j==0)
                  {
                    dp[i][j]=0;
                    continue;
                  }
                
                if(s1.charAt(i-1)==s2.charAt(j-1))
               {
                 dp[i][j]=dp[i-1][j-1]+1;
               }
               else
               {
             dp[i][j]=Math.max(dp[i][j-1],dp[i-1][j]);
               }
            }
        }
        
        
        return dp[I][J];
        
    }
    public int longestCommonSubsequence(String s1, String s2) {
        int n=s1.length();
        int m=s2.length();
        int[][] dp=new int[n+1][m+1];
        
        int ans=longestCommonSubsequence_tabu(s1,s2,n,m,dp);
        
      //  display2D(dp);
        return ans;
    }
      public static void display(int[] dp) {
        for (int ele : dp)
            System.out.print(ele + " ");
        System.out.println();
    }

    public static void display2D(int[][] dp) {
        for (int[] d : dp)
            display(d);
    }
}