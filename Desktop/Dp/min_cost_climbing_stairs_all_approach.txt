class Solution {
    public static int minCostClimbingStairs_memo(int n,int[] cost,int[] dp)
    {
        if(n<=1)
        {
            return dp[n]=cost[n];
        }
        if(dp[n]!=0)
        {
            return dp[n];
        }
        int fcall=minCostClimbingStairs_memo(n-1,cost,dp);
        int scall=minCostClimbingStairs_memo(n-2,cost,dp);
        int ans=Math.min(fcall,scall)+(n==cost.length?0:cost[n]);
        return dp[n]=ans;
    }
     public static int minCostClimbingStairs_tebu(int N,int[] cost,int[] dp)
    {
        for(int n=0;n<=N;n++)
        {
          if(n<=1)
          {
             dp[n]=cost[n];
              continue;
          }      
        dp[n]=Math.min(dp[n-1],dp[n-2])+(n==cost.length?0:cost[n]);
           
        }
         
        return dp[N];
    }
   
    public int minCostClimbingStairs(int[] cost) {
        int n=cost.length;
        int[] dp=new int[n+1];
      //  Arrays.fill(dp,-1);
        int ans=minCostClimbingStairs_tebu(n,cost,dp);
        return ans;
    }
}