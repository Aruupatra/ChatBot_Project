public static int minDistance_memo(String s1, String s2, int n, int m, int[][] dp) {
        if (n == 0 || m == 0) {
            return dp[n][m] = n != 0 ? n : m;
        }

        if (dp[n][m] != -1)
            return dp[n][m];

        int a = minDistance_memo(s1, s2, n - 1, m - 1, dp);
       
        int b = minDistance_memo(s1, s2, n, m - 1, dp);
        int c = minDistance_memo(s1, s2, n-1, m , dp);

        if (s1.charAt(n - 1) == s2.charAt(m - 1))
            return dp[n][m] = a;
        else
            return dp[n][m] = Math.min(b,c) + 1;
    }
public static int minDistance_tebu(String s1, String s2, int N, int M, int[][] dp) {
        for(int n=0;n<=N;n++)
        {
            for(int m=0;m<=M;m++)
            {
                
                if (n == 0 || m == 0) {
                   dp[n][m] = n != 0 ? n : m;
                   continue;
                  }

        int a = dp[n-1][m-1];
       
        int b = dp[n][m-1];
        int c = dp[n-1][m];

        if (s1.charAt(n - 1) == s2.charAt(m - 1))
            dp[n][m] = a;
        else
            dp[n][m] = Math.min(b,c) + 1;
            
            }
        }
        return dp[N][M];
        
    }
	public int minOperations(String s1, String s2) 
	{ 
	    // Your code goes here
	    int n=s1.length();
	    int m=s2.length();
	    int[][] dp=new  int[n+1][m+1];
        for(int[] d:dp)
        {
           Arrays.fill(d,-1);
        
         }  
               
        int ans=minDistance_tebu(s1,s2,n,m,dp);
        return ans;
	} 